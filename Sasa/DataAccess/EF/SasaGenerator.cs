

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Sasa\App.config"
//     Connection String Name: "BarangaySasaContext"
//     Connection String:      "Data Source=(local)\SQLEXPRESS;Initial Catalog="Family Profile";Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Sasa.DataAccess.EF
{
    using System.Linq;

    #region Unit of work

    public interface IBarangaySasaContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Accessor> Accessors { get; set; } // ACCESSOR
        System.Data.Entity.DbSet<Case> Cases { get; set; } // CASE
        System.Data.Entity.DbSet<Clearance> Clearances { get; set; } // Clearance
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEE
        System.Data.Entity.DbSet<Household> Households { get; set; } // HOUSEHOLD
        System.Data.Entity.DbSet<Livestock> Livestocks { get; set; } // LIVESTOCK
        System.Data.Entity.DbSet<Person> People { get; set; } // PERSON
        System.Data.Entity.DbSet<Purok> Puroks { get; set; } // PUROK

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BarangaySasaContext : System.Data.Entity.DbContext, IBarangaySasaContext
    {
        public System.Data.Entity.DbSet<Accessor> Accessors { get; set; } // ACCESSOR
        public System.Data.Entity.DbSet<Case> Cases { get; set; } // CASE
        public System.Data.Entity.DbSet<Clearance> Clearances { get; set; } // Clearance
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // EMPLOYEE
        public System.Data.Entity.DbSet<Household> Households { get; set; } // HOUSEHOLD
        public System.Data.Entity.DbSet<Livestock> Livestocks { get; set; } // LIVESTOCK
        public System.Data.Entity.DbSet<Person> People { get; set; } // PERSON
        public System.Data.Entity.DbSet<Purok> Puroks { get; set; } // PUROK

        static BarangaySasaContext()
        {
            System.Data.Entity.Database.SetInitializer<BarangaySasaContext>(null);
        }

        public BarangaySasaContext()
            : base("Name=BarangaySasaContext")
        {
        }

        public BarangaySasaContext(string connectionString)
            : base(connectionString)
        {
        }

        public BarangaySasaContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public BarangaySasaContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public BarangaySasaContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccessorConfiguration());
            modelBuilder.Configurations.Add(new CaseConfiguration());
            modelBuilder.Configurations.Add(new ClearanceConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new HouseholdConfiguration());
            modelBuilder.Configurations.Add(new LivestockConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PurokConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccessorConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseConfiguration(schema));
            modelBuilder.Configurations.Add(new ClearanceConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HouseholdConfiguration(schema));
            modelBuilder.Configurations.Add(new LivestockConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PurokConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class BarangaySasaContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<BarangaySasaContext>
    {
        public BarangaySasaContext Create()
        {
            return new BarangaySasaContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeBarangaySasaContext : IBarangaySasaContext
    {
        public System.Data.Entity.DbSet<Accessor> Accessors { get; set; }
        public System.Data.Entity.DbSet<Case> Cases { get; set; }
        public System.Data.Entity.DbSet<Clearance> Clearances { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Household> Households { get; set; }
        public System.Data.Entity.DbSet<Livestock> Livestocks { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<Purok> Puroks { get; set; }

        public FakeBarangaySasaContext()
        {
            Accessors = new FakeDbSet<Accessor>("AccessorId");
            Cases = new FakeDbSet<Case>("CaseId");
            Clearances = new FakeDbSet<Clearance>("ClearanceId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Households = new FakeDbSet<Household>("HouseNo");
            Livestocks = new FakeDbSet<Livestock>("LivestockId");
            People = new FakeDbSet<Person>("PersonId");
            Puroks = new FakeDbSet<Purok>("PurokNo");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ACCESSOR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Accessor
    {
        public int AccessorId { get; set; } // AccessorID (Primary key)
        public string Username { get; set; } // Username (length: 50)
        public string Password { get; set; } // Password (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Employees where [EMPLOYEE].[AccessorID] point to this entity (FK_EMPLOYEE_ACCESSOR)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEE.FK_EMPLOYEE_ACCESSOR

        public Accessor()
        {
            Employees = new System.Collections.Generic.List<Employee>();
        }
    }

    // CASE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Case
    {
        public string CaseId { get; set; } // CaseId (Primary key) (length: 50)
        public string CaseName { get; set; } // CaseName (length: 250)
        public string CaseLevel { get; set; } // CaseLevel (length: 50)
        public System.DateTime? CaseHearingDate { get; set; } // CaseHearingDate
        public string CaseStatus { get; set; } // CaseStatus (length: 50)
        public string Complainant { get; set; } // Complainant (length: 250)
        public int? Respondent { get; set; } // Respondent
        public string RepondentOpt { get; set; } // RepondentOpt (length: 50)
        public string CaseDescription { get; set; } // CaseDescription (length: 300)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [CASE].([Respondent]) (FK_CASE_PERSON)
        /// </summary>
        public virtual Person Person { get; set; } // FK_CASE_PERSON
    }

    // Clearance
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Clearance
    {
        public int ClearanceId { get; set; } // ClearanceID (Primary key)
        public int PersonId { get; set; } // PersonId
        public string Purpose { get; set; } // Purpose (length: 300)
        public System.DateTime? DateRequested { get; set; } // DateRequested
        public bool? IsDone { get; set; } // IsDone
        public string HouseNo { get; set; } // HouseNo (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Household pointed by [Clearance].([HouseNo]) (FK_Clearance_HOUSEHOLD)
        /// </summary>
        public virtual Household Household { get; set; } // FK_Clearance_HOUSEHOLD

        /// <summary>
        /// Parent Person pointed by [Clearance].([PersonId]) (FK_Clearance_PERSON)
        /// </summary>
        public virtual Person Person { get; set; } // FK_Clearance_PERSON
    }

    // EMPLOYEE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Employee
    {
        public int? PersonId { get; set; } // PersonID
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public int? AccessorId { get; set; } // AccessorID
        public string Position { get; set; } // Position (length: 50)
        public string Role { get; set; } // Role (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Accessor pointed by [EMPLOYEE].([AccessorId]) (FK_EMPLOYEE_ACCESSOR)
        /// </summary>
        public virtual Accessor Accessor { get; set; } // FK_EMPLOYEE_ACCESSOR

        /// <summary>
        /// Parent Person pointed by [EMPLOYEE].([PersonId]) (FK_EMPLOYEE_PERSON)
        /// </summary>
        public virtual Person Person { get; set; } // FK_EMPLOYEE_PERSON
    }

    // HOUSEHOLD
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Household
    {
        public string HouseNo { get; set; } // HouseNo (Primary key) (length: 50)
        public int? PurokNo { get; set; } // PurokNo
        public string Address { get; set; } // Address (length: 150)

        // Reverse navigation

        /// <summary>
        /// Child Clearances where [Clearance].[HouseNo] point to this entity (FK_Clearance_HOUSEHOLD)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Clearance> Clearances { get; set; } // Clearance.FK_Clearance_HOUSEHOLD
        /// <summary>
        /// Child Livestocks where [LIVESTOCK].[HouseNo] point to this entity (FK_LIVESTOCK_HOUSEHOLD)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Livestock> Livestocks { get; set; } // LIVESTOCK.FK_LIVESTOCK_HOUSEHOLD
        /// <summary>
        /// Child People where [PERSON].[HouseNo] point to this entity (FK_PERSON_HOUSEHOLD1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person> People { get; set; } // PERSON.FK_PERSON_HOUSEHOLD1

        // Foreign keys

        /// <summary>
        /// Parent Purok pointed by [HOUSEHOLD].([PurokNo]) (FK_HOUSEHOLD_PUROK)
        /// </summary>
        public virtual Purok Purok { get; set; } // FK_HOUSEHOLD_PUROK

        public Household()
        {
            Livestocks = new System.Collections.Generic.List<Livestock>();
            Clearances = new System.Collections.Generic.List<Clearance>();
            People = new System.Collections.Generic.List<Person>();
        }
    }

    // LIVESTOCK
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Livestock
    {
        public string Animal { get; set; } // Animal (length: 50)
        public int LivestockId { get; set; } // LivestockId (Primary key)
        public string Male { get; set; } // Male (length: 5)
        public int? IsVaccinated { get; set; } // IsVaccinated
        public string HouseNo { get; set; } // HouseNo (length: 50)
        public string Female { get; set; } // Female (length: 5)
        public int? Quantity { get; set; } // Quantity

        // Foreign keys

        /// <summary>
        /// Parent Household pointed by [LIVESTOCK].([HouseNo]) (FK_LIVESTOCK_HOUSEHOLD)
        /// </summary>
        public virtual Household Household { get; set; } // FK_LIVESTOCK_HOUSEHOLD
    }

    // PERSON
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Person
    {
        public int PersonId { get; set; } // PersonId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Birthplace { get; set; } // Birthplace (length: 50)
        public System.DateTime? Birthdate { get; set; } // Birthdate
        public string Occupation { get; set; } // Occupation (length: 50)
        public double? Income { get; set; } // Income
        public string Tribe { get; set; } // Tribe (length: 50)
        public string CivilStatus { get; set; } // CivilStatus (length: 50)
        public string Religion { get; set; } // Religion (length: 50)
        public bool? IsHead { get; set; } // IsHead
        public bool? IsPurokHead { get; set; } // IsPurokHead
        public string Relationship { get; set; } // Relationship (length: 50)
        public string HouseNo { get; set; } // HouseNo (length: 50)
        public string Dialect { get; set; } // Dialect (length: 50)
        public string ContactNo { get; set; } // ContactNo (length: 50)
        public string Gender { get; set; } // Gender (length: 50)
        public string Attainment { get; set; } // Attainment (length: 50)
        public string Age { get; set; } // Age (length: 50)
        public int? PurokNo { get; set; } // PurokNo
        public string Organization { get; set; } // Organization (length: 150)
        public System.DateTime? DateOfDeath { get; set; } // DateOfDeath
        public string IsDead { get; set; } // IsDead (length: 50)
        public string IsVoter { get; set; } // IsVoter (length: 50)
        public string HasBirthCert { get; set; } // HasBirthCert (length: 50)
        public bool? HasCases { get; set; } // HasCases

        // Reverse navigation

        /// <summary>
        /// Child Cases where [CASE].[Respondent] point to this entity (FK_CASE_PERSON)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Case> Cases { get; set; } // CASE.FK_CASE_PERSON
        /// <summary>
        /// Child Clearances where [Clearance].[PersonId] point to this entity (FK_Clearance_PERSON)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Clearance> Clearances { get; set; } // Clearance.FK_Clearance_PERSON
        /// <summary>
        /// Child Employees where [EMPLOYEE].[PersonID] point to this entity (FK_EMPLOYEE_PERSON)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // EMPLOYEE.FK_EMPLOYEE_PERSON
        /// <summary>
        /// Child Puroks where [PUROK].[PurokHead] point to this entity (FK_PUROK_PERSON)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purok> Puroks { get; set; } // PUROK.FK_PUROK_PERSON

        // Foreign keys

        /// <summary>
        /// Parent Household pointed by [PERSON].([HouseNo]) (FK_PERSON_HOUSEHOLD1)
        /// </summary>
        public virtual Household Household { get; set; } // FK_PERSON_HOUSEHOLD1

        public Person()
        {
            Cases = new System.Collections.Generic.List<Case>();
            Puroks = new System.Collections.Generic.List<Purok>();
            Clearances = new System.Collections.Generic.List<Clearance>();
            Employees = new System.Collections.Generic.List<Employee>();
        }
    }

    // PUROK
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Purok
    {
        public int PurokNo { get; set; } // PurokNo (Primary key)
        public string PurokName { get; set; } // PurokName (length: 50)
        public string Location { get; set; } // Location (length: 50)
        public int? PurokHead { get; set; } // PurokHead

        // Reverse navigation

        /// <summary>
        /// Child Households where [HOUSEHOLD].[PurokNo] point to this entity (FK_HOUSEHOLD_PUROK)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Household> Households { get; set; } // HOUSEHOLD.FK_HOUSEHOLD_PUROK

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PUROK].([PurokHead]) (FK_PUROK_PERSON)
        /// </summary>
        public virtual Person Person { get; set; } // FK_PUROK_PERSON

        public Purok()
        {
            Households = new System.Collections.Generic.List<Household>();
        }
    }

    #endregion

    #region POCO Configuration

    // ACCESSOR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccessorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Accessor>
    {
        public AccessorConfiguration()
            : this("dbo")
        {
        }

        public AccessorConfiguration(string schema)
        {
            ToTable("ACCESSOR", schema);
            HasKey(x => x.AccessorId);

            Property(x => x.AccessorId).HasColumnName(@"AccessorID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // CASE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CaseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Case>
    {
        public CaseConfiguration()
            : this("dbo")
        {
        }

        public CaseConfiguration(string schema)
        {
            ToTable("CASE", schema);
            HasKey(x => x.CaseId);

            Property(x => x.CaseId).HasColumnName(@"CaseId").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CaseName).HasColumnName(@"CaseName").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.CaseLevel).HasColumnName(@"CaseLevel").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CaseHearingDate).HasColumnName(@"CaseHearingDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.CaseStatus).HasColumnName(@"CaseStatus").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Complainant).HasColumnName(@"Complainant").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.Respondent).HasColumnName(@"Respondent").HasColumnType("int").IsOptional();
            Property(x => x.RepondentOpt).HasColumnName(@"RepondentOpt").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CaseDescription).HasColumnName(@"CaseDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);

            // Foreign keys
            HasOptional(a => a.Person).WithMany(b => b.Cases).HasForeignKey(c => c.Respondent).WillCascadeOnDelete(false); // FK_CASE_PERSON
        }
    }

    // Clearance
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ClearanceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Clearance>
    {
        public ClearanceConfiguration()
            : this("dbo")
        {
        }

        public ClearanceConfiguration(string schema)
        {
            ToTable("Clearance", schema);
            HasKey(x => x.ClearanceId);

            Property(x => x.ClearanceId).HasColumnName(@"ClearanceID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonId).HasColumnName(@"PersonId").HasColumnType("int").IsRequired();
            Property(x => x.Purpose).HasColumnName(@"Purpose").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.DateRequested).HasColumnName(@"DateRequested").HasColumnType("datetime2").IsOptional();
            Property(x => x.IsDone).HasColumnName(@"IsDone").HasColumnType("bit").IsOptional();
            Property(x => x.HouseNo).HasColumnName(@"HouseNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Household).WithMany(b => b.Clearances).HasForeignKey(c => c.HouseNo).WillCascadeOnDelete(false); // FK_Clearance_HOUSEHOLD
            HasRequired(a => a.Person).WithMany(b => b.Clearances).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_Clearance_PERSON
        }
    }

    // EMPLOYEE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("dbo")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            ToTable("EMPLOYEE", schema);
            HasKey(x => x.EmployeeId);

            Property(x => x.PersonId).HasColumnName(@"PersonID").HasColumnType("int").IsOptional();
            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccessorId).HasColumnName(@"AccessorID").HasColumnType("int").IsOptional();
            Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Role).HasColumnName(@"Role").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Accessor).WithMany(b => b.Employees).HasForeignKey(c => c.AccessorId).WillCascadeOnDelete(false); // FK_EMPLOYEE_ACCESSOR
            HasOptional(a => a.Person).WithMany(b => b.Employees).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_EMPLOYEE_PERSON
        }
    }

    // HOUSEHOLD
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class HouseholdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Household>
    {
        public HouseholdConfiguration()
            : this("dbo")
        {
        }

        public HouseholdConfiguration(string schema)
        {
            ToTable("HOUSEHOLD", schema);
            HasKey(x => x.HouseNo);

            Property(x => x.HouseNo).HasColumnName(@"HouseNo").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PurokNo).HasColumnName(@"PurokNo").HasColumnType("int").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);

            // Foreign keys
            HasOptional(a => a.Purok).WithMany(b => b.Households).HasForeignKey(c => c.PurokNo).WillCascadeOnDelete(false); // FK_HOUSEHOLD_PUROK
        }
    }

    // LIVESTOCK
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LivestockConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Livestock>
    {
        public LivestockConfiguration()
            : this("dbo")
        {
        }

        public LivestockConfiguration(string schema)
        {
            ToTable("LIVESTOCK", schema);
            HasKey(x => x.LivestockId);

            Property(x => x.Animal).HasColumnName(@"Animal").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LivestockId).HasColumnName(@"LivestockId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Male).HasColumnName(@"Male").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.IsVaccinated).HasColumnName(@"IsVaccinated").HasColumnType("int").IsOptional();
            Property(x => x.HouseNo).HasColumnName(@"HouseNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Female).HasColumnName(@"Female").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Household).WithMany(b => b.Livestocks).HasForeignKey(c => c.HouseNo).WillCascadeOnDelete(false); // FK_LIVESTOCK_HOUSEHOLD
        }
    }

    // PERSON
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }

        public PersonConfiguration(string schema)
        {
            ToTable("PERSON", schema);
            HasKey(x => x.PersonId);

            Property(x => x.PersonId).HasColumnName(@"PersonId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Birthplace).HasColumnName(@"Birthplace").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Birthdate).HasColumnName(@"Birthdate").HasColumnType("datetime2").IsOptional();
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("float").IsOptional();
            Property(x => x.Tribe).HasColumnName(@"Tribe").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CivilStatus).HasColumnName(@"CivilStatus").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Religion).HasColumnName(@"Religion").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsHead).HasColumnName(@"IsHead").HasColumnType("bit").IsOptional();
            Property(x => x.IsPurokHead).HasColumnName(@"IsPurokHead").HasColumnType("bit").IsOptional();
            Property(x => x.Relationship).HasColumnName(@"Relationship").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.HouseNo).HasColumnName(@"HouseNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Dialect).HasColumnName(@"Dialect").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ContactNo).HasColumnName(@"ContactNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Attainment).HasColumnName(@"Attainment").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Age).HasColumnName(@"Age").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PurokNo).HasColumnName(@"PurokNo").HasColumnType("int").IsOptional();
            Property(x => x.Organization).HasColumnName(@"Organization").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.DateOfDeath).HasColumnName(@"DateOfDeath").HasColumnType("datetime2").IsOptional();
            Property(x => x.IsDead).HasColumnName(@"IsDead").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsVoter).HasColumnName(@"IsVoter").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.HasBirthCert).HasColumnName(@"HasBirthCert").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.HasCases).HasColumnName(@"HasCases").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.Household).WithMany(b => b.People).HasForeignKey(c => c.HouseNo).WillCascadeOnDelete(false); // FK_PERSON_HOUSEHOLD1
        }
    }

    // PUROK
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PurokConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purok>
    {
        public PurokConfiguration()
            : this("dbo")
        {
        }

        public PurokConfiguration(string schema)
        {
            ToTable("PUROK", schema);
            HasKey(x => x.PurokNo);

            Property(x => x.PurokNo).HasColumnName(@"PurokNo").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PurokName).HasColumnName(@"PurokName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PurokHead).HasColumnName(@"PurokHead").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Person).WithMany(b => b.Puroks).HasForeignKey(c => c.PurokHead).WillCascadeOnDelete(false); // FK_PUROK_PERSON
        }
    }

    #endregion

}
// </auto-generated>

